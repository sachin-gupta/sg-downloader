#Trusty had many things installed (https://docs.travis-ci.com/user/reference/trusty/)
dist: xenial
os: linux
sudo: required
services:
  - docker
language: python
python:
  # to test project against python 3.7
  - "3.7"
  # to test project against pypy also
  #- "pypy"
# command to install dependencies
branches:
  only:
    - /^master.*$/
    - /^release.*$/
    - /^hotfix.*$/
    - /^quality.*$/
    - /^develop.*$/
    - /^feature.*$/
    - /^[vrbfhdq]?\d+\.\d+\.\d+$/
    - tags
    - /^docker.*$/
install:
  # TODO: Runtime dependencies not required to be installed on TravisCI but have to be inside docker.
  # ! Doing so to check which one fails on Travis CI shell
  # ~ Now next line is commented to speed up the installation process on TravisCI.
  # ! Remove comment of next line when you want to check which deps install on TravisCI build agent
  ##- pip install --no-cache-dir  --upgrade --ignore-installed -r requirements.txt

  # Development dependencies (setuptools, pytest and twine required thus using this)
  # !
  - pip install --no-cache-dir --upgrade --ignore-installed -r requirements-dev.txt
# command to run tests
script:
  # Echo TravisCI built in enviornment variables
  - echo "^^^ TravisCI Diagnostics Variables ^^^"
  - echo "Build No & ID = ${TRAVIS_BUILD_NUMBER} and ${TRAVIS_BUILD_ID}"
  - echo "Job No & ID = ${TRAVIS_JOB_NUMBER} & ${TRAVIS_JOB_ID}"
  - echo "Commit ID = ${TRAVIS_COMMIT}"
  - echo "Commit Message = ${TRAVIS_COMMIT_MESSAGE}"
  - echo "Repo Slug = ${TRAVIS_REPO_SLUG}"
  - echo "Build Directory = ${TRAVIS_BUILD_DIR}"
  - echo "OS Name = ${TRAVIS_OS_NAME}"

  - echo "^^^ Other Diagnostics Variable ^^^"
  - echo "Github PAT = ${GITHUB_PAT}"
  - echo "Git Reference = $(git log --format=%h -1)"

  # Execute our test cases using pytest
  - pytest

  # Make out documentation using Sphinx
  - rm -rf .\docs\_build
  - cd docs
  - make clean
  - make html
  - cd ..

  # Build all distros - src, binary and windows wheel
  - rm -rf dist/
  - rm -rf sg_downloader.egg-info/
  - python setup.py sdist bdist bdist_wheel --universal

  # Now build the docker image from Dockerfile with ${DOCKER_APPNAME}
  - echo "${DOCKER_USERNAME}/${DOCKER_APPNAME}:${DOCKER_TAG}"
  - docker build -t "${DOCKER_USERNAME}/${DOCKER_APPNAME}:${DOCKER_TAG}" -t "${DOCKER_USERNAME}/${DOCKER_APPNAME}:latest" .

  # Check the present images in the our system [${DOCKER_APPNAME} Should Appear]
  - docker images
  - docker history "${DOCKER_USERNAME}/${DOCKER_APPNAME}:${DOCKER_TAG}"

  # Run our application inside docker image ${DOCKER_APPNAME} using docker run
  - docker run ${DOCKER_USERNAME}/${DOCKER_APPNAME}:${DOCKER_TAG}

  # Check that our application inside docker image ${DOCKER_APPNAME} created a container
  - docker ps --all

  # Save compiled docker image with application as tar file for later use
  - docker save -o ${DOCKER_APPNAME}_${DOCKER_TAG}.tar ${DOCKER_USERNAME}/${DOCKER_APPNAME}:${DOCKER_TAG}

  # Login to dockerhub and push image as full name and tag
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  ##- docker tag ${DOCKER_APPNAME} ${DOCKER_USERNAME}/${DOCKER_APPNAME}:${DOCKER_TAG}
  - docker push ${DOCKER_USERNAME}/${DOCKER_APPNAME}:${DOCKER_TAG}

# As per [this](https://docs.travis-ci.com/user/deployment/releases/) either set your build to deploy only when
# the build already has a tag using 'on.tags: true', or manually tag the commit with git tag in before_deploy.
# Hence i'll tag the commit manually here for TravisCI. This needs to be done in "before_deploy" section
before_deploy:
  # 1. Setup GIT User Name & EMail for TravisCI
  - git config --global credential.helper store
  - git config --local user.name "sachin-gupta"
  - git config --local user.email "sachin.aut@gmail.com"

  # 2. Create Tag (Locally) To Push
  # (It's written in script as I don't want travis to terminate on tag delete step - This requires external script with set +e option)
  - echo "Calling ./scripts/git-safedellocaltag.sh to safely delete existing tag"
  - chmod ugo+x scripts/git-safedellocaltag.sh
  - ./scripts/git-safedellocaltag.sh

  # 3. Try to create tag locally with commit id
  - echo "Back from Script to .travis.yml, Now creating desired tag"
  - echo git tag \"$(git log --format=%h -1)\"
  #git tag "$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)"
  - git tag "$(git log --format=%h -1)"

# Deployment of desired branches and tags only
deploy:
  provider: releases

  api_key: "${GITHUB_PAT}"

  # Items to artifact in glob pattern
  file_glob: true
  file: dist/**/*

  # Make sure you have skip_cleanup set to true, otherwise Travis CI will delete all the files created during the build, which will probably delete what you are trying to upload.
  skip_cleanup: true

  # Make sure to set overwrite: true as writing to same tag again and again
  overwrite: true
  # Deplyoment conditions for TravisCI (https://docs.travis-ci.com/user/deployment/#Conditional-Releases-with-on%3A)
  on:
    all_branches: true
    condition: $TRAVIS_BRANCH =~ ^master|release|hotfix$ || -n $TRAVIS_TAG
  # Commented as I am tagging manually becasue I don't want only tags to get deployed
  #  tags: true

# Arrest email notifications on build success
notifications:
  email:
    on_success: never
    on_failure: always
